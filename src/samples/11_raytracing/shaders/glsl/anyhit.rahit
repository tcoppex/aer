#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

// -----------------------------------------------------------------------------

#include "../interop.h"
#include <material/interop.h>

// -----------------------------------------------------------------------------

hitAttributeEXT vec2 hitAttribs;

layout(location = 0) rayPayloadInEXT HitPayload_t payload;

layout(scalar, set = kDescriptorSet_Internal, binding = kDescriptorSetBinding_MaterialSBO)
buffer RayTracingMaterialSBO_ {
  RayTracingMaterial materials[];
};

layout(set = kDescriptorSet_Scene, binding = kDescriptorSet_Scene_Textures)
uniform sampler2D[] uTextureChannels;

#define TEXTURE_ATLAS(i)  uTextureChannels[nonuniformEXT(i)]

layout(push_constant, scalar) uniform PushConstant_ {
  PushConstant pushConstant;
};

// -----------------------------------------------------------------------------

layout(buffer_reference, scalar) buffer Vertices {
  Vertex v[];
};

layout(buffer_reference, scalar) buffer Indices {
  uint u32[];
};

// -----------------------------------------------------------------------------

struct ObjBuffers_t {
  uint64_t vertexAddr;
  uint64_t indexAddr;
};

layout(set = kDescriptorSet_RayTracing, binding = kDescriptorSet_RayTracing_InstanceSBO, scalar)
buffer _scene_desc {
  ObjBuffers_t addr[];
} ObjBuffers;

#include <shared/rt_unpack_geometry.glsl>

// -----------------------------------------------------------------------------

void main() {
  Triangle_t tri = unpack_triangle(gl_InstanceID, gl_PrimitiveID);
  vec2 uv = calculate_texcoord(tri, barycenter_from_hit(hitAttribs));

  const uint material_id = gl_InstanceCustomIndexEXT;
  const uint kInvalidIndexU24 = 0x00FFFFFF;

  float opacity = 1.0f;

  if (material_id != kInvalidIndexU24)
  {
    RayTracingMaterial mat = materials[nonuniformEXT(material_id)];

    vec4 color = texture(TEXTURE_ATLAS(mat.diffuse_texture_id), uv)
               * mat.diffuse_factor
               ;
    opacity = (color.a > mat.alpha_cutoff) ? 1.0f : 0.0f;
  }

  if (opacity < 0.99f) {
    ignoreIntersectionEXT;
  }
}

// -----------------------------------------------------------------------------
