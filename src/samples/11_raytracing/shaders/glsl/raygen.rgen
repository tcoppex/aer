#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require

// ----------------------------------------------------------------------------

#include <material/interop.h>
#include "../interop.h" //

// ----------------------------------------------------------------------------

layout(
  rgba16f,
  set = kDescriptorSet_Internal,
  binding = kDescriptorSetBinding_ImageOutput
) uniform image2D uAccumImage;

layout(scalar,
  set = kDescriptorSet_Frame,
  binding = kDescriptorSet_Frame_FrameUBO
) uniform FrameUBO_ {
  FrameData uFrame;
};

layout(
  set = kDescriptorSet_RayTracing,
  binding = kDescriptorSet_RayTracing_TLAS
) uniform accelerationStructureEXT topLevelAS;

layout(push_constant, scalar) uniform PushConstant_ {
  PushConstant pushConstant;
};

// ----------------------------------------------------------------------------

layout(location = 0) rayPayloadEXT HitPayload_t payload;

uint tea(uint v0, uint v1) {
  uint s0 = 0u;
  for (uint n = 0u; n < 16u; n++) {
    s0 += 0x9e3779b9u;
    v0 += ((v1 << 4) + 0xa341316cu) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4u);
    v1 += ((v0 << 4) + 0xad90777du) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761eu);
  }
  return v0;
}

void rngSeed(uint frame) {
  uvec2 pixel = gl_LaunchIDEXT.xy;

#if 0
  uint h = pixel.x * 374761393u + pixel.y * 668265263u;
  h = (h ^ (h >> 13)) * 1274126177u;
  payload.rngState = h ^ (h >> 16);

  payload.rngState ^= pushConstant.accumulation_frame_count << frame;
  payload.rngState += floatBitsToUint(uFrame.cameraPos_Time.w);
#else
  payload.rngState = tea(
    gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x,
    pushConstant.accumulation_frame_count
  );
#endif
}

// ----------------------------------------------------------------------------

void main() {
  // Normalized device coordinates in [-1, 1]
  ivec2 pixel       = ivec2(gl_LaunchIDEXT.xy);
  vec2 pixelCenter  = vec2(pixel) + vec2(0.5);
  vec2 uv           = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 ndc          = uv * 2.0 - 1.0;

  // (flip Y to be consistent with the rasterizer viewport flip..)
  ndc.y = -ndc.y;

  // We use the same UBO as for the rasterization, but with invert
  // view and proj matrices (names don't changes).
  const mat4 viewInverse = uFrame.viewMatrix;
  const mat4 projInverse = uFrame.projectionMatrix;

  vec4 origin = viewInverse * vec4(0, 0, 0, 1);
  vec4 target = projInverse * vec4(ndc, 1, 1);
  vec4 direction = viewInverse * normalize(vec4(target.xyz, 0));
  float tmin = 1e-3;
  float tmax = 1e32;

  payload.origin = origin.xyz;
  payload.direction = direction.xyz;
  payload.radiance = vec3(0.0);
  payload.throughput = vec3(1.0);
  payload.done = 0;
  payload.depth = 0;
  rngSeed(uFrame.frame);

  for (int depth = 0; depth < 64; ++depth) {
    traceRayEXT(
      topLevelAS,
      gl_RayFlagsOpaqueEXT,
      0xff,
      0, // sbt record offset
      0, // sbt record stride
      0, // miss shader index in miss group
      payload.origin,
      tmin,
      payload.direction,
      tmax,
      0
    );

    if ((payload.done == 1)
     || (dot(payload.throughput, payload.throughput) < 0.01)
    ) {
      break;
    }
  }

  vec3 prevSample = imageLoad(uAccumImage, pixel).rgb;

  // To avoid having to clear the initial buffer.
  prevSample = max(vec3(0.0f), prevSample); //

  vec3 newSample = payload.radiance.rgb;
  newSample = clamp(newSample, 00.0f, 100.0f);

  float frameCount = float(pushConstant.accumulation_frame_count + 1);
  vec3 accum = mix(prevSample, newSample, 1.0 / frameCount);

  imageStore(uAccumImage, pixel, vec4(accum, 1.0));
}

// ----------------------------------------------------------------------------
